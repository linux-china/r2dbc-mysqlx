package io.r2dbc.mysqlx;

import com.mysql.cj.xdevapi.Session;
import com.mysql.cj.xdevapi.SqlResult;
import com.mysql.cj.xdevapi.SqlStatement;
import io.r2dbc.spi.Result;
import io.r2dbc.spi.Statement;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;
import reactor.util.annotation.Nullable;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * MySQL X Protocol R2DBC statement
 *
 * @author linux_china
 */
public class MysqlxStatement implements Statement {
    private final String sql;
    @Nullable
    private String autoGeneratedColumn;
    private final Session mysqlxSession;
    private Duration timeout;
    private List<Object> binding = new ArrayList<>();

    public MysqlxStatement(Session mysqlxSession, String sql) {
        this.sql = sql;
        this.mysqlxSession = mysqlxSession;
    }

    @Override
    public Statement add() {
        return this;
    }

    @Override
    public Statement bind(int index, Object value) {
        binding.add(index, value);
        return this;
    }

    @Override
    public Statement bind(String name, Object value) {
        throw new UnsupportedOperationException("This statement doesn't support bound named parameters");
    }

    @Override
    public Statement bindNull(int index, Class<?> type) {
        throw new UnsupportedOperationException("This statement doesn't support bound null parameters");
    }

    @Override
    public Statement bindNull(String name, Class<?> type) {
        throw new UnsupportedOperationException("This statement doesn't support bound null parameters");
    }

    @Override
    public Statement returnGeneratedValues(String... columns) {
        autoGeneratedColumn = columns[0];
        return this;
    }

    private String flatSQL() {
        return sql;
    }

    @Override
    public Publisher<? extends Result> execute() {
        //String command = sql.substring(0, sql.indexOf(' ')).toLowerCase();
        SqlStatement statement = mysqlxSession.sql(flatSQL());
        if (!this.binding.isEmpty()) {
            statement.bind(binding);
        }
        CompletableFuture<SqlResult> future = statement.executeAsync();
        return Mono.fromFuture(future).map(sqlResult -> new MysqlxResult(this.sql, sqlResult, this.autoGeneratedColumn));
    }
}
